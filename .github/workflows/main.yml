name: python-ipmi
on: [push]
  
jobs: 
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      JF_URL: ${{ secrets.JF_URL }}
      JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      JF_USER: ${{secrets.JF_USER}}
      MODULE_NAME: "python-ipmi"
      SERVER_ID: "rtsaas"
      REPO: "auth-python-virtual"
      HOST: ${{secrets.JF_HOST}}
      DOCKER_REPO: ${{secrets.DOCKER_REPO}}
      IMAGE_NAME: ${{secrets.IMAGE_NAME}}
    steps:
      - name: Checkout the repository    
        uses: actions/checkout@v4
      - uses: jfrog/setup-jfrog-cli@v4
        name: Setup JFrog CLI
        id: setup-cli
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: configure jfrog environment
        run: |
          jf pip-config --repo-resolve=auth-python-virtual
      
      - name: Install dependencies
        run: jf pip install python-coveralls coverage pytest pytest-cov flake8

      - name: Test with pytest
        run: |
          pytest --cov=pyipmi --cov-report=lcov
      
      - name: configure environment
        run: >-                      
          python3 -m 
          pip install
          build
          --user

      - name: build project
        run: >-                      
          python3 -m 
          build 
          --wheel 
          --outdir dist/
          .

      - name: publish python package
        run: |
          ls ./dist
          jf rt u ./dist/* auth-python-virtual/ --module=python-ipmi
                
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.JF_URL }}
          username: ${{secrets.JF_USER}}
          password: ${{ secrets.JF_PASSWORD }}

      - name: docker build and scan
        run: |  
          jf docker build . -t ${{secrets.JF_HOST}}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{github.run_number}}
          jf docker push ${{secrets.JF_HOST}}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{github.run_number}}
          jf docker scan ${{secrets.JF_HOST}}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{github.run_number}}                               

      - name: add docker package to build
        run: |  
          echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 
                 
      - name: publish build info
        run: |
          jf rt bce 
          jf rt bag
          jf rt bp
                
      - name: build scan
        run: |            
          jf build-scan --fail=false
